// Code generated by MockGen. DO NOT EDIT.
// Source: amqp.go

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockAMQPClient is a mock of AMQPClient interface.
type MockAMQPClient struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPClientMockRecorder
}

// MockAMQPClientMockRecorder is the mock recorder for MockAMQPClient.
type MockAMQPClientMockRecorder struct {
	mock *MockAMQPClient
}

// NewMockAMQPClient creates a new mock instance.
func NewMockAMQPClient(ctrl *gomock.Controller) *MockAMQPClient {
	mock := &MockAMQPClient{ctrl: ctrl}
	mock.recorder = &MockAMQPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMQPClient) EXPECT() *MockAMQPClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAMQPClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAMQPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAMQPClient)(nil).Close))
}

// ConsumeAMQMessages mocks base method.
func (m *MockAMQPClient) ConsumeAMQMessages() (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeAMQMessages")
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeAMQMessages indicates an expected call of ConsumeAMQMessages.
func (mr *MockAMQPClientMockRecorder) ConsumeAMQMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeAMQMessages", reflect.TypeOf((*MockAMQPClient)(nil).ConsumeAMQMessages))
}

// PublishAMQMessage mocks base method.
func (m *MockAMQPClient) PublishAMQMessage(message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAMQMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishAMQMessage indicates an expected call of PublishAMQMessage.
func (mr *MockAMQPClientMockRecorder) PublishAMQMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAMQMessage", reflect.TypeOf((*MockAMQPClient)(nil).PublishAMQMessage), message)
}

// SetupAMQExchange mocks base method.
func (m *MockAMQPClient) SetupAMQExchange() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupAMQExchange")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupAMQExchange indicates an expected call of SetupAMQExchange.
func (mr *MockAMQPClientMockRecorder) SetupAMQExchange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupAMQExchange", reflect.TypeOf((*MockAMQPClient)(nil).SetupAMQExchange))
}
